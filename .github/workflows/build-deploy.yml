name: Build and deploy

on:
  push:
    branches:
    - main

# Limit concurrent workflow execution to 1.
# Running jobs will be canceled in case a new workflow is started.
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

env:
  APP_IMAGE: ghcr.io/${{ github.repository_owner }}/spring-petclinic:${{ github.run_number }}
  JAVA_VERSION: 17
  PROJECT_ID: se-sehsahm-demo
  GKE_CLUSTER: demo    # Add your cluster name here.
  GKE_ZONE: europe-west2-a   # Add your cluster zone here.
  DEPLOYMENT_NAME: spring-test # Add your deployment name here.
  IMAGE: static-site

jobs:
  test-app:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: ${{ env.JAVA_VERSION }}
        cache: maven
    - name: Test app
      run: ./mvnw -B test

  deploy-image:
    needs:
    - test-app
    runs-on: ubuntu-latest
    steps:
      - uses: buildpacks/github-actions/setup-pack@v4.4.0
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven
      - name: Log in to the container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image
        # Note: make sure the container image name is lowercase only.
        run: ./mvnw -B spring-boot:build-image -DskipTests -Dspring-boot.build-image.imageName=$(echo $APP_IMAGE | awk '{print tolower($0)}') -Dspring-boot.build-image.publish=true
        env:
          # We need to set these properties when using GitHub Actions,
          # so that Spring Boot can publish the resulting image to GHCR.
          DOCKER_PUBLISH_USERNAME: ${{ github.actor }}
          DOCKER_PUBLISH_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}
      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      - name: Deploy to Kubernetes cluster
        uses: Azure/k8s-deploy@v4
        with:
          manifests: app.yaml
          # Fully qualified resource URL of the image(s) to be used for substitutions on the manifest files Example: contosodemo.azurecr.io/helloworld:test
          images: $APP_IMAGE
